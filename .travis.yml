dist: xenial
language: python
python:
- '3.6'
sudo: false
services:
- docker
branches:
  only:
  - master
  - development
  - dev2
cache:
  directories:
  - "$HOME/google-cloud-sdk/"
before_install:
- if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then openssl aes-256-cbc -K $encrypted_cbf1cfd76fa9_key -iv $encrypted_cbf1cfd76fa9_iv
  -in credentials.tar.gz.enc -out credentials.tar.gz -d; fi
# Create environment variable for correct distribution
- export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
# Add the Cloud SDK distribution URI as a package source
- echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
# Import the Google Cloud Platform public key
- curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
# Update the package list and install the Cloud SDK
- sudo apt-get update && sudo apt-get install google-cloud-sdk kubectl
- gcloud --quiet version
- if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then
    tar -xzf credentials.tar.gz;
  fi
- mkdir -p lib
- if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then
    gcloud auth activate-service-account --key-file client-secret.json;
  fi
- curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
- sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu
  $(lsb_release -cs) stable"
- sudo apt-get update
- sudo apt-get -yq --force-yes -o Dpkg::Options::="--force-confold" install docker-ce
- sudo rm /usr/local/bin/docker-compose
- curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` > docker-compose
- chmod +x docker-compose
- sudo mv docker-compose /usr/local/bin
jobs:
  include:
  - stage: "Tests"
    install:
    - pip install -r requirements.txt
    script: pytest
  - stage: deploy-dev
    if: "(NOT type IN (pull_request) AND (branch = development))"
    install:
        # - pip install -r requirements.txt
    - cd kauri-ops
    - source env_setup.sh --config-file config/config-dev.json
    - cd ..
    - gcloud config set project $GOOGLE_PROJECT_ID
    - gcloud container clusters get-credentials $ACS_NAME --zone $GOOGLE_ZONE
    - kubectl config set-context $(kubectl config current-context) --namespace=${TARGET_ENV}
    script:
    - bash ./build-docker-image.sh 0.0.1
    - bash ./k8s/redeploy-k8s.sh 0.0.1
    - python main.py 
